jobs:

  build-uberjar:
    name: Build uberjar
    run_when: &DEFAULT_TRIGGERS
      any branch matches:
        type: branch
        include_match: ^.+$
        exclude_match: '^.*(no-ci|hotspot).*$'
    context:
      include: cider-ci/context-components/uberjar.yml

  rspec-tests:
    name: "RSpec Tests"
    context:
      include: cider-ci/context-components/rspec-tests.yml
    depends_on: &UBERJAR
      rspec tests: { type: job, job_key: build-uberjar, states: [passed]}
    run_when: *UBERJAR

  clojure-tests:
    name: "Clojure Tests"
    context:
      include: cider-ci/context-components/clojure-tests.yml
    depends_on: &UBERJAR
      clojure tests: { type: job, job_key: build-uberjar, states: [passed]}
    run_when: *UBERJAR

  lint:
    name: "Linting"
    description: |
      Code checks: static checks and metrics: complexity, duplication, and format,
      also other consistency checks.
    priority: 3
    run_when: *DEFAULT_TRIGGERS
    context:
      task_defaults:
        include: cider-ci/task-components/env.yml
        environment_variables:
          GIT_LINEAR_HISTORY_CHECK_START_SHA: d9b3e6a1d0397d7294e85a4a189d86aa843f1dfc
        git_options:
          submodules:
            include_match: ^.*$
      contexts:
        cljc-lint:
          tasks:
            cljc-lint:
              scripts:
                test:
                  body: |
                    #!/usr/bin/env bash
                    set -euo pipefail
                    cd ${API_V2_DIR}
                    ./bin/cljfmt check
            standardrb-lint:
              scripts:
                test:
                  body: |
                    #!/usr/bin/env bash
                    set -euo pipefail
                    cd ${API_V2_DIR}
                    ./bin/env/ruby-setup
                    bundle exec standardrb
                    status=$?
                    if [ $status -eq 1 ]; then
                      exit 1
                    fi

        include:
          - path: cider-ci/context-components/lint/rspec-lint.yml
            submodule: [datalayer]
          - path: cider-ci/context-components/lint/git-lint.yml
            submodule: [datalayer]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# META JOBS (only depend on other jobs)                                           #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  all-tests:
    name: All Tests
    description: |
      This job depends on all unit jobs that need to pass.
      It is depended upon by the super-project!
      *Note that there still be more requirements for actually pushing to `origin`,
      look in job **"Good to Merge"**!*
    priority: 999 # "empty" job = high priority
    depends_on: &ALL_TEST_DEPENDS
      rspec tests: { type: job, job_key: rspec-tests, states: [passed]}
      clojure tests: { type: job, job_key: clojure-tests, states: [passed]}
      all-tests of the datalayer: {job_key: all-tests, type: job, submodule: [datalayer], states: [passed]}
    run_when: *ALL_TEST_DEPENDS
    context:
      task: "echo '✔︎ All dependencies have passed' ; exit 0"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# GITHUB BRANCH PROTECTION                                                        #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  good-to-merge:
    name: "⚑ Good To Merge"
    description: |
      This job depends on all jobs that need to pass for "Delivery".
      It is depended upon by GitHub's branch protection (for `master`)!
    priority: 999 # "delivery" job = high priority
    context:
      include:
        - path: cider-ci/context-components/env.yml
        - submodule: [datalayer]
          path: cider-ci/context-components/merge-checks.yml
    depends_on: &GOOD_TO_MERGE_DEPS
      all-tests: {job_key: all-tests, type: job, states: [passed]}
      good to merge of the datalayer: {job_key: merged-to-master, type: job, submodule: [datalayer], states: [passed]}
    run_when: *GOOD_TO_MERGE_DEPS

  merged-to-master:
    name: "Merged to master"
    priority: 999
    depends_on:
      master branch matches:
        type: branch
        include_match: ^master$
    run_when:
      master branch matches:
        type: branch
        include_match: ^master$
    context:
      tasks:
        merged-to-master:
          scripts:
            test:
              body: "exit 0"
